plugins {
    id 'java'
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency.management)
	alias(libs.plugins.graalvm.native)
	alias(libs.plugins.jacoco)
	alias(libs.plugins.owasp.dependency.check)
}

group = 'net.shamansoft'
version = '0.3.24'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

springBoot {
	buildInfo()   // This will generate a build-info.properties file with accurate values
}

sourceSets {
	intTest {
		java.srcDir 'src/intTest/java'
		resources.srcDir 'src/intTest/resources'
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	mockitoAgent
	intTestImplementation.extendsFrom testImplementation
	intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters - exclude default logging
	implementation(libs.bundles.spring.boot.starters) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// SLF4J Simple Logging for native compatibility
	implementation libs.slf4j.api
	implementation libs.slf4j.simple

	// Web Scraping
	implementation libs.jsoup

	// Google Cloud Services
	implementation(libs.bundles.google.cloud) {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	
	// Testcontainers for local development (Firestore emulator)
	implementation(libs.testcontainers.gcloud) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation(libs.testcontainers.testcontainers) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// Annotation Processing
	compileOnly libs.lombok
	annotationProcessor libs.lombok

	// Testing - exclude default logging to avoid conflicts with SLF4J Simple
	testImplementation(libs.bundles.testing) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	testImplementation libs.mockito.core
	mockitoAgent(libs.mockito.core) {
		transitive = false
	}

	// Integration test dependencies
	intTestImplementation(libs.bundles.testcontainers) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	intTestImplementation libs.wiremock.standalone
}

bootJar {
	archiveFileName = 'cookbook.jar'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generate report after tests run
}

// Integration test task
task intTest(type: Test) {
    description = 'Runs integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    useJUnitPlatform()
}

// JaCoCo configuration
jacoco {
	toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test // Tests are required to run before generating the report
    reports {
        xml.required = true // XML report for CI tools like SonarQube
        html.required = true // HTML report for human readability
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.4 // 40% code coverage achieved
            }
        }
    }
}

// Add a task to check coverage
tasks.register('checkCoverage') {
    dependsOn test
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

// Configure dependency check
dependencyCheck {
    outputDirectory = "$buildDir/reports/dependency-check"
    format = 'ALL'
    suppressionFile = 'dependency-check-suppressions.xml'
    failBuildOnCVSS = 7.0
    analyzers {
        centralEnabled = true
        assemblyEnabled = false
        nuspecEnabled = false
        nugetconfEnabled = false
    }
}

graalvmNative {
	binaries {
		main {
			imageName = 'cookbook'
			resources.autodetect()
		}
	}
}
